/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 2.0.4.0
 */
using System.Collections.Generic;
using System.IO;
using Hime.Redist;
using Hime.Redist.Lexer;

namespace PortraitBuilder.Parser
{
	/// <summary>
	/// Represents a lexer
	/// </summary>
	internal class PortraitReaderLexer : ContextFreeLexer
	{
		/// <summary>
		/// The automaton for this lexer
		/// </summary>
		private static readonly Automaton commonAutomaton = Automaton.Find(typeof(PortraitReaderLexer), "PortraitReaderLexer.bin");
		/// <summary>
		/// Contains the constant IDs for the terminals for this lexer
		/// </summary>
		public class ID
		{
			/// <summary>
			/// The unique identifier for terminal ASSIGN
			/// </summary>
			public const int ASSIGN = 0x0007;
			/// <summary>
			/// The unique identifier for terminal OPEN
			/// </summary>
			public const int OPEN = 0x0008;
			/// <summary>
			/// The unique identifier for terminal CLOSE
			/// </summary>
			public const int CLOSE = 0x0009;
			/// <summary>
			/// The unique identifier for terminal SEPARATOR
			/// </summary>
			public const int SEPARATOR = 0x0011;
			/// <summary>
			/// The unique identifier for terminal COMMENT
			/// </summary>
			public const int COMMENT = 0x000F;
			/// <summary>
			/// The unique identifier for terminal IDENTIFIER
			/// </summary>
			public const int IDENTIFIER = 0x000B;
			/// <summary>
			/// The unique identifier for terminal LETTER
			/// </summary>
			public const int LETTER = 0x000A;
			/// <summary>
			/// The unique identifier for terminal WHITE_SPACE
			/// </summary>
			public const int WHITE_SPACE = 0x0010;
			/// <summary>
			/// The unique identifier for terminal NEW_LINE
			/// </summary>
			public const int NEW_LINE = 0x000E;
			/// <summary>
			/// The unique identifier for terminal NUMBER
			/// </summary>
			public const int NUMBER = 0x0006;
			/// <summary>
			/// The unique identifier for terminal INT
			/// </summary>
			public const int INT = 0x0003;
			/// <summary>
			/// The unique identifier for terminal STRING
			/// </summary>
			public const int STRING = 0x000C;
			/// <summary>
			/// The unique identifier for terminal BOOL
			/// </summary>
			public const int BOOL = 0x000D;
			/// <summary>
			/// The unique identifier for terminal FLOAT
			/// </summary>
			public const int FLOAT = 0x0004;
			/// <summary>
			/// The unique identifier for terminal DATE
			/// </summary>
			public const int DATE = 0x0005;
		}
		/// <summary>
		/// Contains the constant IDs for the contexts for this lexer
		/// </summary>
		public class Context
		{
			/// <summary>
			/// The unique identifier for the default context
			/// </summary>
			public const int DEFAULT = 0;
		}
		/// <summary>
		/// The collection of terminals matched by this lexer
		/// </summary>
		/// <remarks>
		/// The terminals are in an order consistent with the automaton,
		/// so that terminal indices in the automaton can be used to retrieve the terminals in this table
		/// </remarks>
		private static readonly Symbol[] terminals = {
			new Symbol(0x0001, "Îµ"),
			new Symbol(0x0002, "$"),
			new Symbol(0x0007, "ASSIGN"),
			new Symbol(0x0008, "OPEN"),
			new Symbol(0x0009, "CLOSE"),
			new Symbol(0x0011, "SEPARATOR"),
			new Symbol(0x000F, "COMMENT"),
			new Symbol(0x000B, "IDENTIFIER"),
			new Symbol(0x000A, "LETTER"),
			new Symbol(0x0010, "WHITE_SPACE"),
			new Symbol(0x000E, "NEW_LINE"),
			new Symbol(0x0006, "NUMBER"),
			new Symbol(0x0003, "INT"),
			new Symbol(0x000C, "STRING"),
			new Symbol(0x000D, "BOOL"),
			new Symbol(0x0004, "FLOAT"),
			new Symbol(0x0005, "DATE") };
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public PortraitReaderLexer(string input) : base(commonAutomaton, terminals, 0x0011, input) {}
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public PortraitReaderLexer(TextReader input) : base(commonAutomaton, terminals, 0x0011, input) {}
	}
}
